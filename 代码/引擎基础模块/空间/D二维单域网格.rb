#!/usr/bin/env ruby -w
# encoding: UTF-8
需要 'D矩形区域'
需要类 'D网格区块'
class D二维单域网格 < D矩形区域
  可读属性 :区块二维数组
  def 初始化(高点, x格数, y格数)
    super(D二维点.新建(0,0), 高点)
    @x格距, @y格距 = 长 / x格数, 宽 / y格数
    @x轴索引上限, @y轴索引上限 = x格数 - 1, y格数 - 1
    @区块二维数组 = R数组.新建(x格数) do |x|
      R数组.新建(y格数) do |y|
        D网格区块.新建(D矩形区域.创建(x * @x格距, y * @y格距, (x + 1) * @x格距, (y + 1) * @y格距))
      end
    end
  end
  def 添加元素(元素)
    相交网格 = 求相交网格(元素.范围)
    相交网格.每个{|网格| 网格 << 元素}
    元素.所在网格 = 相交网格
  end
  def 刷新元素(元素)
    原相交网格 = 元素.所在网格
    现相交网格 = 求相交网格(元素.范围)
    现相交网格.差异对象组(原相交网格).每对{|网格, 是否相交| 是否相交 ? 网格 << 元素 : 网格.删除(元素)}
    元素.所在网格 = 现相交网格
  end
  def 删除元素(元素);元素.所在网格.每个{|网格| 网格.删除(元素)} end
  def 每个相交元素(范围);可能相交元素(范围).每个{|元素| yield(元素) if 范围.相交?(元素.范围)} end
  def 每个被包围元素(范围);可能相交元素(范围).每个{|元素| yield(元素) if 范围.包围?(元素.范围)} end
  def 所有相交元素(范围);可能相交元素(范围).找出全部{|元素| 范围.相交?(元素.范围)} end
  def 所有被包围元素(范围);可能相交元素(范围).找出全部{|元素| 范围.包围?(元素.范围)} end
  私有
  def 可能相交元素(范围);求相交网格(范围).重整.去重 end
  def 求相交网格(范围)
    相交范围 = 相交矩形区域(范围)
    return [] unless 相交范围
    x起点 = 相交范围.低点.x / @x格距
    x终点 = (相交范围.高点.x / @x格距).较小(@x轴索引上限)
    y起点 = 相交范围.低点.y / @y格距
    y终点 = (相交范围.高点.y / @y格距).较小(@y轴索引上限)
    @区块二维数组[x起点..x终点].收集并重整{|数组| 数组[y起点..y终点]}
  end
end
