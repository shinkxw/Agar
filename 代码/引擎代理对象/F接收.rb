#!/usr/bin/env ruby -w
# encoding: UTF-8
#用于接收能量与信息, 能够与场进行连接
module F接收
  扩展 S混入强化
  
  包含时执行 do
    unless (定义了常量?(:C不动代理对象) && (self < C不动代理对象))#依赖区域相关方法
      引发异常('包含特性异常',"F接收只能被C不动代理对象的子类包含") 
    end
    
    初始化执行 do
      @收到信能数组 = []
      @连接场数组 = []
      @对象场_形象_哈希 = {}
      @上次记录坐标 = @坐标
      刷新连接场
    end
  end
  
  def 接收(信能);@收到信能数组 << 信能 end
  def 获取所有收到信能
    所有收到信能 = @收到信能数组 + 所有对象形象
    @收到信能数组 = []
    所有收到信能
  end
  def 刷新连接场#范围变动后调用
    相交场数组 = @所在区域.所有相交场(范围)
    相交场数组.差异对象组(@连接场数组).每对{|场, 是否相交| 是否相交 ? 连接(场) : 断开连接(场)}
  end
  def 连接(场);添加连接场(场); 场.添加连接对象(self) end
  def 断开连接(场);删除连接场(场); 场.删除连接对象(self) end
  def 断开所有连接
    @连接场数组.每个{|场| 场.删除连接对象(self)}
    @连接场数组 = []
    @对象场_形象_哈希 = {}
  end
  def 添加连接场(场)
    @连接场数组 << 场
    @对象场_形象_哈希[场] = nil if 场.是?(C对象场代理对象)
  end
  def 删除连接场(场)
    @连接场数组.删除(场)
    @对象场_形象_哈希.删除(场) if 场.是?(C对象场代理对象)
  end
  def 所有对象形象
    刷新对象形象
    @对象场_形象_哈希.所有值
  end
  def 刷新对象形象
    if @上次记录坐标 == @坐标
      刷新过时对象形象
    else
      刷新所有对象形象
      @上次记录坐标 = @坐标
    end
  end
  def 刷新过时对象形象
    @对象场_形象_哈希.每对 do |对象场, 形象|
      @对象场_形象_哈希[对象场] = 对象场.生成形象(@坐标) if 形象.nil? || 形象.已过时?
    end
  end
  def 刷新所有对象形象;@对象场_形象_哈希.所有键.每个{|对象场| @对象场_形象_哈希[对象场] = 对象场.生成形象(@坐标)} end
end
